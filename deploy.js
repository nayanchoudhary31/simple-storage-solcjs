const ethers = require("ethers");
const fs = require("fs");
require("dotenv").config();
const main = async () => {
  // 1. Get The RPC From the Ganache
  // 2. Install Ethers and Set the Provider
  const provider = new ethers.providers.JsonRpcProvider(
    process.env.GANACHE_RPC_URL
  );
  // 3. Create the Wallet in order to deploy the Contracts
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  // 4. Get the ABI and Bytecode to deploy the contract
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.json", "utf8");
  const bin = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");

  // Encrypted Key For More Security
  // Read for the encrypted key json
  //   const encryptedKeyJSON = fs.readFileSync("./encryptKey.json", "utf8");
  // Create the wallet from encrypted key json
  //   let wallet = new ethers.Wallet.fromEncryptedJsonSync(
  //     encryptedKeyJSON,
  //     process.env.KEY_PASSWORD
  //   );
  // We need to tel the wallet about the proivder
  //   wallet = await wallet.connect(provider);
  // 5. Create the contract factory object with ABI, Bytecode and Provider
  const contractFactory = new ethers.ContractFactory(abi, bin, wallet);
  console.log("Deploying the contract.....");
  // 6. Deploy the contract and await for the contract to be deployed
  const contract = await contractFactory.deploy();
  // Wait for the contract to be deployed for certain amount of block
  await contract.deployTransaction.wait(1);
  //   console.log(deploymentReceipt);
  //   console.log("Contract successfully Deployed", contract.address);

  // Create a Tx Object and send the trasaction
  //   let tx = {
  //     nonce: await wallet.getTransactionCount(),
  //     gasPrice: 20000000000,
  //     gasLimit: 1000000,
  //     to: null,
  //     value:0,
  //     data: "0x608060405234801561001057600080fd5b50610935806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636f760f411161005b5780636f760f4114610100578063b05784b81461011c578063c0f16d751461013a578063c7a0d9f61461016a5761007d565b8063092a182014610082578063246982c4146100b35780636057361d146100e4575b600080fd5b61009c600480360381019061009791906105d2565b610188565b6040516100aa9291906106da565b60405180910390f35b6100cd60048036038101906100c891906105d2565b610244565b6040516100db92919061068f565b60405180910390f35b6100fe60048036038101906100f991906105d2565b610328565b005b61011a60048036038101906101159190610576565b610332565b005b6101246103c8565b60405161013191906106bf565b60405180910390f35b610154600480360381019061014f919061052d565b6103d1565b60405161016191906106bf565b60405180910390f35b6101726103ff565b60405161017f91906106bf565b60405180910390f35b6001818154811061019857600080fd5b90600052602060002090600202016000915090508060000154908060010180546101c1906107d3565b80601f01602080910402602001604051908101604052809291908181526020018280546101ed906107d3565b801561023a5780601f1061020f5761010080835404028352916020019161023a565b820191906000526020600020905b81548152906001019060200180831161021d57829003601f168201915b5050505050905082565b606060006001838154811061025c5761025b610865565b5b90600052602060002090600202016001016001848154811061028157610280610865565b5b90600052602060002090600202016000015481805461029f906107d3565b80601f01602080910402602001604051908101604052809291908181526020018280546102cb906107d3565b80156103185780601f106102ed57610100808354040283529160200191610318565b820191906000526020600020905b8154815290600101906020018083116102fb57829003601f168201915b5050505050915091509150915091565b8060008190555050565b600060405180604001604052808381526020018481525090508160028460405161035c9190610678565b90815260200160405180910390208190555060018190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906103c0929190610405565b505050505050565b60008054905090565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60005481565b828054610411906107d3565b90600052602060002090601f016020900481019282610433576000855561047a565b82601f1061044c57805160ff191683800117855561047a565b8280016001018555821561047a579182015b8281111561047957825182559160200191906001019061045e565b5b509050610487919061048b565b5090565b5b808211156104a457600081600090555060010161048c565b5090565b60006104bb6104b68461072f565b61070a565b9050828152602081018484840111156104d7576104d66108c8565b5b6104e2848285610791565b509392505050565b600082601f8301126104ff576104fe6108c3565b5b813561050f8482602086016104a8565b91505092915050565b600081359050610527816108e8565b92915050565b600060208284031215610543576105426108d2565b5b600082013567ffffffffffffffff811115610561576105606108cd565b5b61056d848285016104ea565b91505092915050565b6000806040838503121561058d5761058c6108d2565b5b600083013567ffffffffffffffff8111156105ab576105aa6108cd565b5b6105b7858286016104ea565b92505060206105c885828601610518565b9150509250929050565b6000602082840312156105e8576105e76108d2565b5b60006105f684828501610518565b91505092915050565b600061060a82610760565b610614818561076b565b93506106248185602086016107a0565b61062d816108d7565b840191505092915050565b600061064382610760565b61064d818561077c565b935061065d8185602086016107a0565b80840191505092915050565b61067281610787565b82525050565b60006106848284610638565b915081905092915050565b600060408201905081810360008301526106a981856105ff565b90506106b86020830184610669565b9392505050565b60006020820190506106d46000830184610669565b92915050565b60006040820190506106ef6000830185610669565b818103602083015261070181846105ff565b90509392505050565b6000610714610725565b90506107208282610805565b919050565b6000604051905090565b600067ffffffffffffffff82111561074a57610749610894565b5b610753826108d7565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156107be5780820151818401526020810190506107a3565b838111156107cd576000848401525b50505050565b600060028204905060018216806107eb57607f821691505b602082108114156107ff576107fe610836565b5b50919050565b61080e826108d7565b810181811067ffffffffffffffff8211171561082d5761082c610894565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6108f181610787565b81146108fc57600080fd5b5056fea2646970667358221220be4b6f00010d7a96f7ded3c7d1b6b4fe4c8e2150269caffdce7bb2e77d33436a64736f6c63430008070033",
  //     chainId: 1337,
  //   };
  // Deployment only with transaction data
  //   const sendTxReceipt = await wallet.sendTransaction(tx);
  //   await sendTxReceipt.wait(1); // Wait for 1 block transaction to complete
  //   console.log(sendTxReceipt);

  // Contract Interaction store and retrieve values
  const oldNumber = await contract.retreive();
  console.log(`Current Favorite Number: ${oldNumber}`);
  // Update the current Favorite Number
  const txResponse = await contract.store("781");
  const txReceipt = await txResponse.wait(1);
  const newNumber = await contract.retreive();
  console.log(`New Favorite Number: ${newNumber}`);
};

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.log("Error :", error);
    process.exit(1);
  });
